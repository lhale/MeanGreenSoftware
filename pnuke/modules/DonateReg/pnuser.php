<?php 
// $Id: pnuser.php,v 1.28 2005/04/07 04:22:21 nuclearw Exp $
// ----------------------------------------------------------------------
// POST-NUKE Content Management System
// Copyright (C) 2002 by the PostNuke Development Team.
// http://www.postnuke.com/
// ----------------------------------------------------------------------
// Based on:
// PHP-NUKE Web Portal System - http://phpnuke.org/
// Thatware - http://thatware.org/
// ----------------------------------------------------------------------
// LICENSE
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WIthOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
// Original Author of file: Erik Bartels
// Purpose of file:  DonateReg user display functions
// ----------------------------------------------------------------------
// Changelog:
// 04/05/2004  Modified getallevents function to use ADODB to modify date format, and
// removed the corresponding code for date format conversion from viewcategories
/**
 * the main user function
 * This function is the default function, and is called whenever the module is
 * initiated without defining arguments.  As such it can be used for a number
 * of things, but most commonly it either just shows the module menu and
 * returns or calls whatever the module designer feels should be the default
 * function (often this is the view() function)
 */
function donatereg_user_main()
{ 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing.  For the
    // main function we want to check that the user has at least overview
    // privilege for some item within this component, or else they won't be
    // able to see anything and so we refuse access altogether.  The lowest
    // level of access for administration depends on the particular module, but
    // it is generally either 'overview' or 'read'
    if (!pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_READ)) {
        $output->Text(_EVENTREGNOAUTH);
        return $output->GetOutput();
    } 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_user_viewcategories());
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} 

/**
 * view items
 * This is a standard function to provide an overview of all of the items
 * available from the module.
 */
function donatereg_user_viewcategories()
{ 
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    $startnum = pnVarCleanFromInput('startnum');
	$columns = pnModGetVar('DonateReg', 'categorycolumns'); // Sets the number of columns that are displayed in the user category list   
    if ($columns == 0 || $columns == null ) {
        $columns = 3;
    }
	// Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML();

    if (!pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_READ)) {
        $output->Text(_EVENTREGNOAUTH);
        return $output->GetOutput();
    } 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu(array('donate_selectionid' => null)));
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Title - putting a title ad the head of each page reminds the user what
    // they are doing
    $output->Title(_VIEWCATEGORIES); 
    // Load API.  Note that this is loading the user API, that is because the
    // user API contains the function to obtain item information which is the
    // first thing that we need to do.  If the API fails to load an appropriate
    // error message is posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADUSERAPIFAILED);
        return $output->GetOutput();
    } 
    // The user API function is called.  This takes the number of items
    // required and the first number in the list of all items, which we
    // obtained from the input and gets us the information on the appropriate
    // items.
    $items = pnModAPIFunc('DonateReg',
        'user',
        'getallcategories',
        array('startnum' => $startnum,
            'numitems' => pnModGetVar('DonateReg',
                'itemsperpage')));

	if (!$items) {
		$output->LineBreak(2);
		$output->Text(_EVENTREGNOTSETUPYET);
		return $output->GetOutput();	    
	}


    $catcount = pnModAPIFunc('DonateReg',
        'user',
        'countcategories',
        array()); 
    // Start output table

    $output->TableStart(_EVENTREGCATEGORIES, array(), 0);
    $output->TableRowStart();
    foreach ($items as $item) {
        if (pnSecAuthAction(0, 'DonateReg::', ":$item[categoryid]:", ACCESS_READ)) {
            $count = $count + 1;
            $categoryid = $item['categoryid'];
            $numevents = 0 + pnModAPIFunc('DonateReg', 'user', 'counteventsincategory', array('categoryid' => $categoryid)); 
            $output->SetInputMode(_PNH_VERBATIMINPUT);
            $output->SetOutputMode(_PNH_KEEPOUTPUT);
            $output->Text('<td colspan="1" rowspan="1" align="center" valign="top" width="' . (100/$columns) . '%">');
            $output->Text('&nbsp;<B>');
            if ($numevents) {
                $output->url(pnmodurl('DonateReg', 'user', 'viewevents', array('categoryid' => $item['categoryid'])), pnVarCensor($item['name']));
            } ELSE {
                $output->BoldText(pnVarCensor($item['name']));
            } 
            $output->BoldText("($numevents)");
            $output->LineBreak();
            $output->Text(pnVarCensor($item['description']));
            $output->TableColEnd();
            $output->SetInputMode(_PNH_PARSEINPUT);
            if (is_int($count / $columns)) { // UPDATE TO CHANGE NUMBER OF CATEGORYS DISPLAYED ON EACH LINE  Make this a  module variable in the future?
				$output->TableRowEnd();
                $output->TableRowStart();
            } 
        } 
    } 
    $output->TableRowEnd();
    $output->TableEnd(); 
    // Call the pnHTML helper function to produce a pager in case of there
    // being many items to display.
    // Note that this function includes another user API function.  The
    // function returns a simple count of the total number of items in the item
    // table so that the pager function can do its job properly
    $output->Pager($startnum,
        pnModAPIFunc('DonateReg', 'user', 'countitems'),
        pnModURL('DonateReg',
            'admin',
            'viewcategories',
            array('startnum' => '%%')),
        pnModGetVar('DonateReg', 'itemsperpage')); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} 

// Create a simplified list of contribution entries
// (See donatereg_user_vieweventdetails() for a more cluttered but descriptive view
function donatereg_user_viewevents()
{
	if(pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN))
        return (donatereg_user_vieweventdetails(false)); 
    else
        return (donatereg_user_vieweventdetails(true));    // view simplified for users
    // Get parameters from whatever input we need.  All arguments to this

    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    $startnum = pnVarCleanFromInput('startnum');
	$itemsperpage = pnModGetVar('DonateReg','eventsperpage'); //got the  modvar now - Brian M 2/3/05
	
    $viewtype = pnVarCleanFromInput('viewtype');
    $categoryid = pnVarCleanFromInput('categoryid'); 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu(array('donate_selectionid' => null)));
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'DonateReg::events', '::', ACCESS_OVERVIEW)) {
        $output->Text(_VIEWEVENTNOAUTH);
        return $output->GetOutput();
    } 
    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $items = pnModAPIFunc('DonateReg',
        'user',
        'getallevents',
        array('startnum' => $startnum,
            'categoryid' => $categoryid,
            'type' => $viewtype,
            'numitems' => pnModGetVar('DonateReg',
                'eventsperpage'))); 
    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($items == false) {
        $output->Text(_VIEWEVENTSFAILED);
    } 
    // Loop through each item and display it.  Note the use of pnVarCensor() to
    // remove any words from the name that the administrator has deemed
    // unsuitable for the site
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableStart(_CURRENTEVENTS, array(), 1);
    $currentdt = '';
    foreach ($items as $item) 
    {
        $output->TableRowStart();
        if ($item['event_start'] == null)    // LDH - chg'd fr !=; there is no event_start
        {
            $output->Text('<TD border="0" width="150px" STYLE="border-top-style: none; border-right-style: dotted; border-bottom-style: dotted; border-left-style: none; border-right-width: medium; border-bottom-width: medium;">');
  //          $output->Text(date(	pnModGetVar('DonateReg','dateformat'),$item['event_start']));
            $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $item['categoryid']));

            if ($cat != false)
                $catname = $cat['name'];
            else
                $catname = _CATUNDEFINED;
            $output->Text($catname . _FOR . $item['header']);
            $output->TableColEnd();
            $output->TableRowEnd();
            $output->TableRowStart();
            //$output->TableColStart();
    		$output->Text('<TD border="0" width="100px" rowspan="2">');
    		//Check if the registration window has closed
    		
    		$output->Text(pnModFunc('DonateReg', 'user', 'regopen', array('event_id' => $item['donate_selectionid'], 'categoryid' => $categoryid, 'catname' => $catname)));    // LDH - added categid&nm
    	} 
    	else 
    	{
            $output->TableColStart();
            $output->Text("&nbsp;");
        } 

        $output->TableColEnd();
        if (pnSecAuthAction(0,'DonateReg::events',"::$item[donate_selectionid] ",ACCESS_READ)) 
        {
     /* LDH - no current need for start times
       	$output->Text('<td colspan="1" rowspan="2" align="center" valign="center" width="50px">');

            $output->Text(date(pnModGetVar('DonateReg','timeformat'),$item['event_start']));
            $output->TableColEnd();
*/
            $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
            $output->Text(_EVENTNAME);
            $output->TableColEnd();
            $output->TableColStart();
            $output->URL(pnModURL('DonateReg',
                    'user',
                    'displayevent',
                    array('donate_selectionid' => $item['donate_selectionid'])),
                pnVarPrepForDisplay(pnVarCensor($item['name'])));
            $output->Text(" <small>(" ._DISPLAYEVENT . ")</small>)");
            $output->Linebreak();
            $output->TableColEnd();
            $output->TableRowEnd();
            $output->TableRowStart();
            //$output->TableColStart(2);
            //$output->TableColEnd();
            $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
            $output->Text(_SUMMARY);
            $output->TableColEnd();
            $output->TableColStart();
            $output->Text($item['summary']);
            $output->TableColEnd();
            $output->TableRowEnd();
        } 
    } 
    $output->TableEnd();
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Call the pnHTML helper function to produce a pager in case of there
    // being many items to display.
    // Note that this function includes another user API function.  The
    // function returns a simple count of the total number of items in the item
    // table so that the pager function can do its job properly
    $output->Pager($startnum,
        pnModAPIFunc('DonateReg', 'user', 'counteventsincategory', array('categoryid' => $categoryid)),
        pnModURL('DonateReg',
            'user',
            'viewevents',
            array('startnum' => '%%', 'categoryid' => $categoryid)),
        pnModGetVar('DonateReg', 'eventsperpage')); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} // donatereg_user_viewevents()

// Use this (instead of donatereg_user_viewevents above ) for a less cluttered but descriptive view
// this function also has the "View Categories", "Search Entries", "Entries I'm Registered for" links atop removed
function donatereg_user_vieweventdetails($simplified = false)
{
    //  Grab the current theme information
    /* LDH - Gotta go thru all this goddamn nonsense just to pick up the bgcolors > 5
	 * and in doing so, expect a NON-matching 1:1 relation between the color palette and
	 * the bgcolors (HOW BOGUS). But, the end result can be a DB configured palette.
	 */

	    $skinName = pnUserGetTheme();
// echo "skinName=" . $skinName;  

    $skinID = pnModAPIFunc('Xanthia','user','getSkinID', array('skin' => $skinName));

// echo "skinID=" . $skinID;
    $paletteid = pnModGetVar('Xanthia',''.$skinName.'use');
// echo "paletteid=" . $paletteid;
    $colors = pnModAPIFunc('Xanthia','user','getSkinColors', array('skinid' => $skinID, 'paletteid' => $paletteid));    
    
    global $bgcolor1, $bgcolor2, $bgcolor3, $bgcolor4, $bgcolor5, $bgcolor6;
//    echo $bgcolor5 . ",\"" . $bgcolor6 . "\""; 
    if ( !$bgcolor6  || $bgcolor6 == null || $bgcolor6 == false || $bgcolor6 == "")
        $bgcolor6 = $colors['color5'];    // LDH - yep, truly BOGUS
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    $startnum = pnVarCleanFromInput('startnum');
	$itemsperpage = pnModGetVar('DonateReg','eventsperpage'); //got the  modvar now - Brian M 2/3/05
	
    $viewtype = pnVarCleanFromInput('viewtype');
    $categoryid = pnVarCleanFromInput('categoryid'); 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    if ( $simplified == false)
    {
        // Add menu to output - it helps if all of the module pages have a standard
        // menu at their head to aid in navigation
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->Text(donatereg_usermenu(array('donate_selectionid' => null)));
    }
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'DonateReg::events', '::', ACCESS_OVERVIEW)) {
        $output->Text(_VIEWEVENTNOAUTH);
        return $output->GetOutput();
    } 
    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $items = pnModAPIFunc('DonateReg',
        'user',
        'getallevents',
        array('startnum' => $startnum,
            'categoryid' => $categoryid,
            'type' => $viewtype,
            'numitems' => pnModGetVar('DonateReg',
                'eventsperpage'))); 
    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($items == false) {
        $output->Text(_VIEWEVENTSFAILED);
    } 
// echo "items=$items,count=" . count($items) . "\n<br />";
    // Loop through each item and display it.  Note the use of pnVarCensor() to
    // remove any words from the name that the administrator has deemed
    // unsuitable for the site
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    if ( $simplified == false)
    {
        $output->TableStart(_CURRENTEVENTS , array(), 1);
    }
    else
    {      
        $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $categoryid));
        if ($cat != false)
           $catname = $cat['name'];
        else
           $catname = _CATUNDEFINED;    // tableStart("table_caption", array(column_nms), border[T|F], width, padding)
        $output->TableStart('', '', 0, "100%", "15");    // Push down the next table 50 pixels
        //  $output->TableAddrow($row, 'left');
        $output->TableEnd();
        $output->TableStart('<span class="bigtext">' . _YOUR . $catname  . _CURRENTEVENTS. "</span>", array(), 1, '90%', 5);
    }
    $currentdt = '';
    foreach ($items as $item) 
    {
        $output->TableRowStart();
        if ($item['event_start'] == null)    // LDH - chg'd fr !=; there is no event_start
        {
          if ( $simplified == false)
          {
            $output->Text('<TD border="0" width="150px" STYLE="border-top-style: none; border-right-style: dotted; border-bottom-style: dotted; border-left-style: none; border-right-width: medium; border-bottom-width: medium;">');
  //          $output->Text(date(	pnModGetVar('DonateReg','dateformat'),$item['event_start']));
            $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $item['categoryid']));

            if ($cat != false)
                $catname = $cat['name'];
            else
                $catname = _CATUNDEFINED;
            $output->Text($catname . _FOR . $item['header']);
            $output->TableColEnd();
          }
            $output->TableRowEnd();
            $output->TableRowStart();
            //$output->TableColStart();
            if ( $simplified == false)
    		    $output->Text('<TD border="0" width="100px" rowspan="2">');
            else    // Give the impression of a button to push (NOTE: style descript HAS to be defined here)
    		    $output->Text('<TD rowspan="2" STYLE="background-color: ' . $bgcolor6 . '; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-right-width: medium; border-bottom-width: medium;">');
            
    		//Check if the registration window has closed
    		$output->Text(pnModFunc('DonateReg', 'user', 'regopen', array('event_id' => $item['donate_selectionid'], 'categoryid' => $categoryid, 'catname' => $catname, 'event_name' => $item['name'], 'header' => $item['header'], 'simplified' => $simplified)));    // LDH - added categid & ones after
    	} 
    	else 
    	{
            $output->TableColStart();    // Ghost of the dotted box
            $output->Text("&nbsp;");
        } 

        $output->TableColEnd();
        if (pnSecAuthAction(0,'DonateReg::events',"::$item[donate_selectionid] ",ACCESS_READ)) 
        {
     /* LDH - no current need for start times
       	$output->Text('<td colspan="1" rowspan="2" align="center" valign="center" width="50px">');

            $output->Text(date(pnModGetVar('DonateReg','timeformat'),$item['event_start']));
            $output->TableColEnd();
*/
            if ( $simplified == false)
            {
                $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
                $output->Text(_EVENTNAME);
                $output->TableColEnd();
                $output->TableColStart();
                // LDH - style="text-decoration: underline"
                $output->URL(pnModURL('DonateReg',
                    'user',
                    'displayevent',
                    array('donate_selectionid' => $item['donate_selectionid'])),
                pnVarPrepForDisplay(pnVarCensor($item['name'])));
                $output->Text(" <small>(" ._DISPLAYEVENT . ")</small>)");
                $output->Linebreak();
                $output->TableColEnd();
                $output->TableRowEnd();
                $output->TableRowStart();
                //$output->TableColStart(2);
                //$output->TableColEnd();
                $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
                $output->Text(_SUMMARY);
                $output->TableColEnd();
                $output->TableColStart();
                $output->Text($item['summary']);
                $output->TableColEnd();
                $output->TableRowEnd();
            }
            else
            {
                $output->TableColStart();
                $output->Text('<span class="bigtext" >' . $item['summary'] . "</span>");
                $output->TableColEnd();
                $output->TableRowEnd();
                
                $output->TableRowStart();
                $output->TableColStart();
                $output->URL(pnModURL('DonateReg',
                        'user',
                        'displayevent',
                        array('donate_selectionid' => $item['donate_selectionid'])),
                    pnVarCensor(" <small>(" . $item['name'] . _DISPLAYEVENT. ")</small>"));
                $output->TableColEnd();
                $output->TableRowEnd();
            }
        } 
    } 
    $output->TableEnd();
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Call the pnHTML helper function to produce a pager in case of there
    // being many items to display.
    // Note that this function includes another user API function.  The
    // function returns a simple count of the total number of items in the item
    // table so that the pager function can do its job properly
    $output->Pager($startnum,
        pnModAPIFunc('DonateReg', 'user', 'counteventsincategory', array('categoryid' => $categoryid)),
        pnModURL('DonateReg',
            'user',
            'viewevents',
            array('startnum' => '%%', 'categoryid' => $categoryid)),
        pnModGetVar('DonateReg', 'eventsperpage')); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} // donatereg_user_vieweventdetails()

function template_user_view()
{ 
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    $startnum = pnVarCleanFromInput('startnum'); 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(template_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'Templates::', '::', ACCESS_OVERVIEW)) {
        $output->Text(_TEMPLATENOAUTH);
        return $output->GetOutput();
    } 
    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('Template', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $items = pnModAPIFunc('Template',
        'user',
        'getall',
        array('startnum' => $startnum,
            'numitems' => pnModGetVar('Template',
                'itemsperpage'))); 
    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($items == false) {
        $output->Text(_TEMPLATEITEMFAILED);
    } 
    // Loop through each item and display it.  Note the use of pnVarCensor() to
    // remove any words from the name that the administrator has deemed
    // unsuitable for the site
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    foreach ($items as $item) {
        if (pnSecAuthAction(0,
                'Templates::',
                "$item[name]::$item[tid]",
                ACCESS_READ)) {
            $output->URL(pnModURL('Template',
                    'user',
                    'display',
                    array('tid' => $item['tid'])),
                pnVarPrepForDisplay(pnVarCensor($item['name'])));
            $output->Linebreak();
        } 
    } 
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Call the pnHTML helper function to produce a pager in case of there
    // being many items to display.
    // Note that this function includes another user API function.  The
    // function returns a simple count of the total number of items in the item
    // table so that the pager function can do its job properly
    $output->Pager($startnum,
        pnModAPIFunc('Template', 'user', 'countitems'),
        pnModURL('Template',
            'user',
            'view',
            array('startnum' => '%%')),
        pnModGetVar('Template', 'itemsperpage')); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} 


//function to tell if registration is still open
// LDH - since we're taking about donors, it's always open
function donatereg_user_regopen($args) {
	extract($args);
	//echo "Eventid received by user_regopen=[".$event_id."]<br>";
	$output = new pnHTML(); 
	//decide if user can still register

	$output->SetInputMode(_PNH_VERBATIMINPUT);
	//$output->Text('<br /><hr><br />');
// LDH 	if (pnModAPIFunc('DonateReg', 'user', 'checkregopen', array('event_id' => $event_id)))
	    {
/* LDH 		//Registration window is still open, now check that the event isn't already full - Brian 1-15-05
			$reg_status = pnModAPIFunc('DonateReg', 'user', 'checkfull', array('donate_selectionid' => $event_id));
			if ($reg_status[event_full]) {
    			//sorry, event is full
    			$output->Text('<div align="center"><span style="color:red;">'._EVENTREG_EVENTFULL.'</span></div>');
    			
			} else
*/
			{
    			//Event is open
    			//$output->Text('<div align="center"><span style="color:green;">'._EVENTREG_REGWINDOWOPEN.'</span><br>');
    			if ( $simplified == false )
    			{
    			    $output->Text('<div align="center"><span style="color:green;">' . $reg_status[seats_left ]. " " . _EVENTREG_SEATSLEFTOPEN . $catname . _PEOPLE . '</span><br>');
    			    $output->URL(pnModURL('DonateReg',
                        'user',
                        'registerevent',
                        array('donate_selectionid' => $event_id)),
                    	pnVarPrepForDisplay(pnVarCensor(_EVENTREG_REGNOW)));
    			}
    			else
    			{
    			    // LDH - In the future, perhaps there's a way to split the link description with the link title
    			    //     (currently, they are set the same, so the hover tag adds no new info)
    			    $output->Text('<div align="center">');
    			    // Sneaky way of getting around the title limitation
    			    $link = pnVarPrepForDisplay(pnModURL('DonateReg','user','registerevent',
                        array('donate_selectionid' => $event_id)));
    			    $link = "<a href=\"$link\" title=\"$header\">" . '<span class="biglinktext">' . $event_name . "</span>" . "</a>";
    			    $output->Text($link);
    			    /* Old (bogus) non-title way - pnModURL soesn't support this, probably because it's
					 * unsupported on non-W3C browsers [i.e. IE])
    			    $output->URL(pnModURL('DonateReg',
                        'user',
                        'registerevent',
                        array('donate_selectionid' => $event_id)),
                    	pnVarCensor('<span class="biglinktext">' . $event_name . "</span>"));
					*/
    			 }
    	         $output->Text('</div>');
			}
		} 
/* LDH	else {
			$output->Text('<div align="center"><span style="color:red;">'._EVENTREG_REGWINDOWCLOSED.'</span></div>');
		}
*/
	return $output->GetOutput();

} // donatereg_user_regopen($args)

/**
 * display entry item
 * This is a standard function to provide detailed information on a single item
 * available from the module.
 */
function donatereg_user_displayevent($args)
{ 
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke.
    list($donate_selectionid,
        $objectid) = pnVarCleanFromInput('donate_selectionid',
        'objectid'); 
    // User functions of this type can be called by other modules.  If this
    // happens then the calling module will be able to pass in arguments to
    // this function through the $args parameter.  Hence we extract these
    // arguments *after* we have obtained any form-based input through
    // pnVarCleanFromInput().
    extract($args); 
    // At this stage we check to see if we have been passed $objectid, the
    // generic item identifier.  This could have been passed in by a hook or
    // through some other function calling this as part of a larger module, but
    // if it exists it overrides $tid
    // Note that this module couuld just use $objectid everywhere to avoid all
    // of this munging of variables, but then the resultant code is less
    // descriptive, especially where multiple objects are being used.  The
    // decision of which of these ways to go is up to the module developer
    if (!empty($objectid)) {
        $donate_selectionid = $objectid;
    } 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
     // LDH - client does not want users to see this heading (oh well)    
	if(pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN))
	    $erhidemenu = false;
	else
        $erhidemenu = true;    // This will also draw a pretty table for the user (below)
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
	if (!$erhidemenu) 
	{
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->Text(donatereg_usermenu(array('donate_selectionid' => $donate_selectionid)));
        $output->SetInputMode(_PNH_PARSEINPUT); 
	}

    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $event = pnModAPIFunc('DonateReg',
        'user',
        'getevent',
        array('donate_selectionid' => $donate_selectionid));

    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($event == false) {
        $output->Text(_ENTRYITEMFAILED . _FORENTRYITEM . $donate_selectionid);
        return $output->GetOutput();
    } 
/* LDH - perhaps later. I expect there's no limit to # of donors
	//decide if user can still register
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text('<br /><hr><br />');
    $output->Text(pnModFunc('DonateReg', 'user', 'regopen', array('event_id' => $event['donate_selectionid'])));
*/
		
    // //////////////////////////////extract($event);
    // Display details of the item.  Note the use of pnVarCensor() to remove
    // any words from the name that the administrator has deemed unsuitable for
    // the site.  Also note that a module variable is used here to determine
    // whether not not parts of the item information should be displayed in
    // bold type or not
	//1-15-05 Added check to make sure that a variable isn't empty (not equal to "") before bothering to show the field
	//checking that the var isn't null doesn't work, have to check that the var isn't empty ($event[var]<>"") instead
     
    // Title - putting a title ad the head of each page reminds the user what
    // they are doing
    
    $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $event['category']));
    if ($cat != false) {
        $catname = pnVarCensor($cat['name']);
    } 
//    $output->Title($catname . _SELECTIONDETAILS . pnVarCensor($event['name']));
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    if (!$erhidemenu)
        $output->TableStart($catname . _SELECTIONDETAILS . pnVarCensor($event['name']), '', 0, '');    // 0=noborder
    else
    {
        $output->TableStart('', '', 0, "100%", "50");    // Push down the next table 50 pixels
        //  $output->TableAddrow($row, 'left');
        $output->TableEnd();
        $output->TableStart('<big>' .$catname . _SELECTIONDETAILS . pnVarCensor($event['name']) .  "</big>", '', 1, "90%", "5");    // bordered partial width w/ padding
    }
    $row = array();
/*
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_EVENTNAME));
    $row[] = $output->BoldText(pnVarCensor($event['name']));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
*/
    // org Name
	If ($event['orgname'] <> "") {
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_ORGNAME));
		$row[] = $output->BoldText(pnVarCensor($event['orgname']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
/*
    // Event Category ID
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_SELECTEVENTCATEGORY));

    $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $event['category']));

    if ($cat != false) {
        $row[] = $output->BoldText(pnVarCensor($cat['name']));
    } 
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
*/
/* LDH - perhaps later
    // Registration Start Date/time
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[0] = $output->Text(pnVarPrepForDisplay(_REGSTARTDATETM));
    $row[1] = $output->BoldText(pnVarCensor(date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['reg_start'])));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 

    // Registration End Date/time
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[0] = $output->Text(pnVarPrepForDisplay(_REGENDDATETM));
    $row[1] = $output->BoldText(pnVarCensor((date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['reg_end']))));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // event Start Date/time
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[0] = $output->Text(pnVarPrepForDisplay(_EVENTSTARTDATETM));
    $row[1] = $output->BoldText(pnVarCensor((date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['event_start']))));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // event End Date/time
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[0] = $output->Text(pnVarPrepForDisplay(_EVENTENDDATETM));
    $row[1] = $output->BoldText(pnVarCensor((date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['event_end']))));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
*/
    //Event Location
	if($event['location'] <> "") {	
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTLOCATION));
		$row[] = $output->Text(pnVarCensor($event['location']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
    // LDH - Change to display only what's available
   // if ($event['addr1'] <> null or $event['addr2'] <> null or $event['city'] <> null or $event['state'] <> null or $event['zipcode'] <> null or $event['country'] <> null) {
      if ($event['addr1'] <> null) 
      {
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTADDR1));
        $row[] = $output->Text($event['addr1']);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
      }
      if ($event['addr2'] <> null )
      {
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTADDR2));
        $row[] = $output->Text($event['addr2']);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
      }
      if  ($event['city'] <> null or $event['state'] <> null or $event['zipcode'] <> null)
      {
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTCITY . ", " . _EVENTSTATE . " " . _EVENTZIPCODE));
        $row[] = $output->Text($event['city'] . ", " . $event['state'] . " " . $event['zipcode']);
        switch (pnModGetVar('DonateReg', 'mapservice')) {
            case 'Yahoo': // us or canada only
                $mapurl = "http://us.rd.yahoo.com/maps/us/insert/Tmap/extmap/*-http://maps.yahoo.com/maps_result?";
                $mapurl .= "addr=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&csz=" . preg_replace('/ /', '+', $event['city']) . "%2C+" . $event['state'] . "+" . $event['zipcode'];
                $mapurl .= "&country=" . $event['country'];
                $row[] = $output->URL($mapurl, _EVENTREGYAHOOMAP);
                break;
            case 'MapQuest':
                $mapurl = "http://www.mapquest.com/maps/map.adp?";
                $mapurl .= "address=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&city=" . preg_replace('/ /', '+', $event['city']);
                $mapurl .= "&state=" . $event['state'];
                $mapurl .= "&zip=" . $event['zipcode'];
                $mapurl .= "&country=" . $event['country'];
                $row[] = $output->URL($mapurl, _EVENTREGMAPQUEST);
                break;
            case 'MultiMap':
                $mapurl = "http://www.multimap.com/map/places.cgi?db=US&client=public";
                $mapurl .= "&pc=" . $event['zipcode'];
                $mapurl .= "&addr2=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&addr3=" . preg_replace('/ /', '+', $event['city']);
                $mapurl .= "&state=" . $event['state'];
                $mapurl .= "&db=" . substr($event['country'],0,2); // Guessing Country code. If wrong user will follow MultiMap.
                $mapurl .= "&scale=5000";
                $row[] = $output->URL($mapurl, _EVENTREGMULTIMAP);
                break;
            case 'Maporama':
                $mapurl = "http://www.maporama.com/share/map.asp?State=&POOCODE=&SEARCH_ADDRESS.x=0&SEARCH_ADDRESS.y=0";
                $mapurl .= "&Zip=" . $event['zipcode'];
                $mapurl .= "&_XgoGCAddress=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "+" . preg_replace('/ /', '+', $event['addr2']);
                $mapurl .= "&_XgoGCTownName=" . $event['city'];
                $mapurl .= "&COUNTRYCODE=" . substr($event['country'],0,2); // Guessing Country code. If wrong user will follow MultiMap.
                $row[] = $output->URL($mapurl, _EVENTREGMAPORAMA);
                break;
            case none:
            default:
            case null:
                break;
        } // switch
    	$output->SetOutputMode(_PNH_KEEPOUTPUT);
    	$output->SetInputMode(_PNH_VERBATIMINPUT);
    	$output->TableAddrow($row, 'left');
    	$output->SetInputMode(_PNH_PARSEINPUT);
      }
      if ( $event['country'] <> null) 
      {
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTCOUNTRY));
        $row[] = $output->Text($event['country']);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
	
    } 

    // Event Header Text
	if($event['header'] <> ""){
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTHEADER));
		// Line below changed to allow full HTML code in text.
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$row[] = $output->Text(pnVarCensor($event['header']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
    // Event Summary Text
	if($event['summary'] <> ""){
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTSUMMARY));
		// Line below changed to allow full HTML code in text.
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$row[] = $output->Text(pnVarCensor($event['summary']));
		// $row[] = "<b>" . pnVarCensor($event['summary']) . "</b>";
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
    // Event Detail Text
	if(!is_null($event['description'])){
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTDESCRIPTION));
		// Line below changed to allow full HTML code in text. As above.
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$row[] = $output->Text(pnVarCensor($event['description']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	} 
	// commentfieldlabel
	if(!is_null($event['commentfieldlabel']))
	{
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTUSERREGCOMMENTFIELDLABEL));
		// Line below changed to allow full HTML code in text. As above.
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$row[] = $output->Text(pnVarCensor($event['commentfieldlabel']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT);
	} 
// LDH - maybe later
	if(!is_null($event['registrations']))
	{
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTREGISTRATIONS));
        $row[] = $output->BoldText(pnModAPIFunc('DonateReg','user','countregistrationsforevent',
    					    array('donate_selectionid' => $donate_selectionid)));
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
	} 
	if(pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN) &&
	    !is_null($event['max_donors']) && $event['max_donors'] <> "" )
	{
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_EVENTMAXREGISTRATIONS));
        $row[] = $output->Text(pnVarCensor($event['max_donors']));
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
	}
// LDH - maybe later 
    // Fee
	if($event['fee'] <> "" AND $event['fee'] <> 0){
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTFEE));
		$row[] = $output->BoldText(pnVarCensor(_EVENTREGCURRENCY . " " . $event['fee']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
    // Contact Phone Number
	if($event['phone'] <> ""){
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_EVENTCONTACTPHONE));
		$row[] = $output->BoldText(pnVarCensor($event['phone']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT); 
	}
    // LOGO GOES HERE
    // ICON GOES HERE

	// LDH - For all admin users, display change control info
	$gid = pnUserGetVar('gid'); 
	if (pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN))
	{
        // Original Creator:
        if ( $event['addedby'] != null || $event['addedby'] != "")
        {
//            $user_info = pnUserGetVars(pnSessionGetVar(pnVarCensor($event['addedby'])));
            $user_info = pnUserGetVars(pnVarCensor($event['addedby']));
            $user_name = $user_info['uname'];    // Name used for signing on
            $reg_name = $user_info['name'];    // Name recorded during add/change
        }
        else
            $user_name = _NOUSERNMDEFINED ;
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_ADDEDBY));
		$row[] = $output->Text($user_name . " (" . $reg_name . ")");
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT);
		
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_DATEADDED));
		$row[] = $output->Text(pnVarCensor($event['dateadded']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT);
        
	    // Last Modifier:
        if ( $event['changedby'] != null || $event['changedby'] != "")
        {
//            $user_info = pnUserGetVars(pnSessionGetVar(pnVarCensor($event['addedby'])));
            $user_info = pnUserGetVars(pnVarCensor($event['addedby']));
            $user_name = $user_info['uname'];    // Name used for signing on
            $reg_name = $user_info['name'];    // Name recorded during add/change
        }
        else
            $user_name = _NOUSERNMDEFINED ;
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_CHANGEDBY));
		$row[] = $output->Text($user_name . " (" . $reg_name . ")");
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT);
		$row = array();
		$output->SetOutputMode(_PNH_RETURNOUTPUT);
		$row[] = $output->Text(pnVarPrepForDisplay(_DATECHANGED));
		$row[] = $output->Text(pnVarCensor($event['datechanged']));
		$output->SetOutputMode(_PNH_KEEPOUTPUT);
		$output->SetInputMode(_PNH_VERBATIMINPUT);
		$output->TableAddrow($row, 'left');
		$output->SetInputMode(_PNH_PARSEINPUT);
	
        // Notify Email
    	if($event['notifyemail'] <> ""){
    		$row = array();
    		$output->SetOutputMode(_PNH_RETURNOUTPUT);
    		$row[] = $output->Text(pnVarPrepForDisplay(_NOTIFYEMAIL));
    		$row[] = $output->BoldText(pnVarCensor($event['notifyemail']));
    		$output->SetOutputMode(_PNH_KEEPOUTPUT);
    		$output->SetInputMode(_PNH_VERBATIMINPUT);
    		$output->TableAddrow($row, 'left');
    		$output->SetInputMode(_PNH_PARSEINPUT); 
    	}
	}    // end admin level info
//Close Table
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableEnd();
    /* LDH - perhaps later. I expect there's no limit to # of donors
    $output->SetInputMode(_PNH_PARSEINPUT); 
	$output->SetInputMode(_PNH_VERBATIMINPUT);
//reg open/close
	$output->Text(pnModFunc('DonateReg', 'user', 'regopen', array('event_id' => $event['donate_selectionid'])));
*/
    /*
	 * Display everybody that has registered for this specific contribution entry
	 */
    $output->SetInputMode(_PNH_PARSEINPUT); 
    if (pnSecAuthAction(0, 'DonateReg::', '::', pnModGetVar('DonateReg', 'viewregistrationlevel'))) {

        $output->SetInputMode(_PNH_VERBATIMINPUT);
	    $output->Text(pnModFunc('DonateReg',
                                'user',
				'viewregistrations',
				           array('donate_selectionid' => $event['donate_selectionid'],
                                                 '')));

    }
    // Let any hooks know that we are displaying an item.  As this is a display
    // hook we're passing a URL as the extra info, which is the URL that any
    // hooks will show after they have finished their own work.  It is normal
    // for that URL to bring the user back to this function
    $output->Text(pnModCallHooks('item',
            'display',
            $event['donate_selectionid'],
            pnModURL('DonateReg',
                'user',
                'displayevent',
                array('donate_selectionid' => $event['donate_selectionid']))));
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} // donatereg_user_displayevent($args)

/**
 * generate menu fragment
 */
function donatereg_usermenu($args)
{ 
    // LDH - client is asking we don't show this to regular users (hmmmm)
    if ( ! pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN))
        return null;
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    if ($args != null) {
        extract($args);
    } 
    $output = new pnHTML(); 
    // Display status message if any.  Note that in future this functionality
    // will probably be in the theme rather than in this menu, but this is the
    // best place to keep it for now
    // Start options menu
    $output->Text(pnGetStatusMsg());
    $output->Linebreak(2); 
    // Menu options.  These options are all added in a single row, to add
    // multiple rows of options the code below would just be repeated
    $output->TableStart(_EVENTREG);
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $columns = array();
    $columns[] = $output->URL(pnModURL('DonateReg',
            'user',
            'viewcategories'),
        _VIEWCATEGORIES);
    $columns[] = $output->URL(pnModURL('DonateReg',
            'user',
            'advancedsearchform'),
        _SEARCHEVENTS);
    $columns[] = $output->URL(pnModURL('DonateReg',
                                       'user',
                                       'viewmyregistrations'),
                                        _EVENTREGMYREGS); 
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddRow($columns);
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->TableEnd(); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} 

function donatereg_user_registerevent($args)
{
    list($donate_selectionid,
        $objectid) = pnVarCleanFromInput('donate_selectionid',
        'objectid'); 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    extract($args);
    $output = new pnHTML();

    if (!empty($objectid)) {
        $donate_selectionid = $objectid;
    } 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_COMMENT)) {
    	$output->SetInputMode(_PNH_PARSEINPUT); 
        $output->Text(_EVENTREGNOAUTH);
	//echo "userid=[".pnUserGetVar('uid')."]<br>";
	if(!pnUserGetVar('uid')){
		//not logged in, tell need to be registered site user
		$output->Text(_EVENTREGMUSTBEUSER);
		}
        return $output->GetOutput();
    } 
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Title - putting a title at the head of each page reminds the user what
    // they are doing
    $output->Title(_REGISTEREVENT);

    if (is_null($donate_selectionid) || empty($donate_selectionid)) 
    {
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->Text(_PLEASE . _SELECTEVENT);
        $output->FormStart(pnModURL('DonateReg', 'user', 'registerevent'));
        $sel_data = pnModAPIFunc('DonateReg', 'user', 'getallevents');
        foreach ($sel_data as $data) {
            $sel2_data[] = array('id' => $data['donate_selectionid'], 'name' => $data['name']);
        } 
        $output->FormSelectMultiple('donate_selectionid', $sel2_data);
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->LineBreak(1);
        $output->FormSubmit(_SELECTEVENTFROMLIST);
        $output->FormEnd();
        return $output->GetOutput();
    } 
/* LDH = perhaps later
	//Start routine to check if registration window is still open
	// added by Brian M 12-23-04
	If(!pnModAPIFunc('DonateReg', 'user', 'checkregopen', array('event_id' => $donate_selectionid))) {
		$output->Text(_EVENTREG_REGWINDOWCLOSED2);
        return $output->GetOutput();
        
	}
	//End registration window check

    // Start of routine to check if this event has reached the max_donors threshold.
    // Added this check for DonateReg .511
*/
    // LDH - Get the contribution entry's name at least for the form info below
    $event = pnModAPIFunc('DonateReg', 'user', 'getevent', array('donate_selectionid' => $donate_selectionid));
/* LDH - let admin be concerned with # registered
    $registrations = pnModAPIFunc('DonateReg','user','countregistrationsforevent',
		    array('donate_selectionid' => $donate_selectionid));


    if ($registrations >= $event['max_donors']) {
        $output->Text(_MAXREGSREACHED);
        return $output->GetOutput();
    } 

    // End of max_donors check routine added for DonateReg .511
*/	
	//Check that this user hasn't already registered for the same event (only allowed to register once)
	if(pnModAPIFunc('DonateReg', 'user', 'alreadyregistered', array('event_id' => $donate_selectionid))) {
		$output->Text(_ALREADYREGISTERED);
        return $output->GetOutput();
	}
	//End already registered check
    $output->FormStart(pnModURL('DonateReg', 'user', 'createregistration')); 
    // Add an authorisation ID - this adds a hidden field in the form that
    // contains an authorisation ID.  The authorisation ID is very important in
    // preventing certain attacks on the website
    $output->FormHidden('authid', pnSecGenAuthKey());
    $output->FormHidden('donate_selectionid', $donate_selectionid); 
    // Start the table that holds the information to be input.  Note how each
    // item in the form is kept logically separate in the code; this helps to
    // see which part of the code is responsible for the display of each item,
    // and helps with future modifications
    $output->TableStart(); 
    // userid
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_YOURUSERID));
    $row[] = $output->BoldText(pnVarPrepForDisplay(pnUserGetVar('uname')));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // donate_selectionid
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_EVENTNAME));
    $row[1] = $output->BoldText(pnVarPrepForDisplay($event['name']) . "    ");
    $row[1] = $row[1] . $output->URL(pnModURL('DonateReg', 'user', 'registerevent'), _CHANGE);

    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Name
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_NAMEREGISTERED));
    $row[] = $output->FormText('nameregistered', '', 75, 255);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
    // Main Phone #
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_PHONE));
    $row[] = $output->FormText('phone', '', 25, 25);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
    // Alternate Phone #
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_ALTPHONE));
    $row[] = $output->FormText('altphone', '', 25, 25);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2);
/* LDH - each donor must register themselves 
    // Number attending
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_NUMBEROFPEOPLE));
    $row[] = $output->FormText('numberofpeople', '1', 5, 5);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
*/
    // Comment Field
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay($event['commentfieldlabel']));
    $row[1] = $output->FormTextArea('comment', '', 4, 75);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2);
		// Email of registrant Field
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_REGEMAIL));
    $row[] = $output->FormText('regemail', pnUserGetVar('email'), 25, 255);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2);

    $output->TableEnd(); 
    // End form
    $output->Linebreak(2);
    $output->FormSubmit(_EVENTREGSUBMITREGISTRATION);
    $output->FormEnd(); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} // donatereg_user_registerevent()



function donatereg_user_viewregistrations($args)
{ 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
 
    if (!pnSecAuthAction(0, 'DonateReg::', '::', pnModGetVar('DonateReg', 'viewregistrationlevel'))) {
        $output->Text("");
        return $output->GetOutput();
    } 
	
	$donate_selectionid = pnVarCleanFromInput('donate_selectionid');
	$commentfieldlabel = pnVarCleanFromInput('commentfieldlabel');

    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADUSERAPIFAILED);
        return $output->GetOutput();
    } 
			
	$registrations = pnModAPIFunc('DonateReg',
                                      'user',
                                      'getregistrationsforevent',
                                                 array('donate_selectionid' => $donate_selectionid));

    $output->Linebreak(2); 

    if (!empty($registrations)) {

        $output->SetOutputMode(_PNH_KEEPOUTPUT);
	    $output->SetInputMode(_PNH_PARSEINPUT); 
		$output->Linebreak(2);
        if (pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN)) {
            $output->TableStart(_REGISTRATIONS, array(_USERNAME,
                    _NAMEREGISTERED,
                    _PHONE,
                    _ALTPHONE,
                    _EMAIL,
                    _COMMENTS,
                    _OPTIONS), 1, '95%', 0);
        } ELSE {
            $output->TableStart(_REGISTRATIONS, array(_USERNAME,
                    _NAMEREGISTERED,
                    _CONFIRMSENT), 1, '65%', 5);
        }

        $totalregs = 0;
        foreach ($registrations as $registration) {
            // regname
            $totalregs += 1;     // LDH - every donor must register him/herself 
            $row = array();
            $output->SetOutputMode(_PNH_RETURNOUTPUT);
            $row[0] = $output->Text(pnUserGetVar('uname', $registration['userid']));
            $row[1] = $output->Text(pnVarPrepForDisplay($registration['nameregistered']));
            if (pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN)) {
                $row[2] = $output->Text(pnVarPrepForDisplay($registration['phone']));
                $row[3] = $output->Text(pnVarPrepForDisplay($registration['altphone']));
                // NEVER use pnVarPrepForDisplay() with an email addr - it munges the @
                $row[4] = $output->Text(pnVarCensor($registration['regemail']));
                $row[5] = $output->Text(pnVarCensor($registration['comments']));
                if ( $registration['other'] != "" )
                    $row[5] = $output->BoldText(pnVarPrepForDisplay(_SEEOTHER));    // Just give admin a note for now
                $row[6] = $output->URL(pnModUrl('DonateReg',
                                                'user',
                                                'deleteregistration', 
                                                array('registrationid' => $registration[registrationid])),_DELETE);
            } ELSE {
                if ( $registration['confirmationsent'] > 0 )
                    $row[2] = $output->Text(pnVarPrepForDisplay($registration['regemail']));
                else
                  $row[2] = $output->BoldText(_NOCONFIRMSENT);
                  
            }
            $output->SetInputMode(_PNH_VERBATIMINPUT);
            $row[0] .= $output->Text("&nbsp;");
            $row[1] .= $output->Text("&nbsp;");
            $row[2] .= $output->Text("&nbsp;");
            if (pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN)) {
                $row[3] .= $output->Text("&nbsp;");
                $row[4] .= $output->Text("&nbsp;");
                $row[5] .= $output->Text("&nbsp;");
                $row[6] .= $output->Text("&nbsp;");
            }
            $output->SetOutputMode(_PNH_KEEPOUTPUT);
            $output->TableAddrow($row, 'left');
            $output->SetInputMode(_PNH_PARSEINPUT);


        } 

        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = "";
        if (pnSecAuthAction(0, 'DonateReg::', '::', ACCESS_ADMIN)) {
               $row[] = "";
               $row[] = "";
               $row[] = "";
        }
        $row[] = $output->Text(_TOTALREGISTRATIONS);
        $row[] = $output->BoldText($totalregs);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'center');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->TableEnd();
    } ELSE {
        $output->BoldText(_EVENTREGNOREGISTRATIONS);
    } 
    // Return the output that has been generated by this function
    return $output->GetOutput();
} 

function donatereg_user_createregistration($args)
{ 
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    list($donate_selectionid,
        $nameregistered,
        $phone,
        $altphone,
        $other,    // LDH  chg'd fr numberofpeople
		$regemail,
        $comment) = pnVarCleanFromInput('donate_selectionid',
        'nameregistered',
        'phone',
        'altphone',
    	'other',
		'regemail',
        'comment');
    $userid = pnUserGetVar('uid');
	//debug
	//echo "donate_selectionid=[".$donate_selectionid."] regemail=[".$regemail."]<br>";

    extract($args);
    $output = new pnHTML(); 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu());
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Confirm authorisation code.  This checks that the form had a valid
    // authorisation code attached to it.  If it did not then the function will
    // proceed no further as it is possible that this is an attempt at sending
    // in false data to the system
    if (!pnSecConfirmAuthKey()) {
        pnSessionSetVar('errormsg', _ALREADYSUBMITTED);
        pnRedirect(pnModURL('DonateReg', 'user', 'main'));
        return true;
    } 
    if (!pnModAPILoad('DonateReg', 'user')) {
        pnSessionSetVar('errormsg', _USERAPILOADFAILED);
        return $output->GetOutput();
    } 
	
	//Check that this user hasn't already registered for the same event (only allowed to register once)
	if(pnModAPIFunc('DonateReg', 'user', 'alreadyregistered', array('event_id' => $donate_selectionid))) {
		$output->Text(_ALREADYREGISTERED);
        return $output->GetOutput();
	}
	//End already registered check
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    if ($numberofpeople < 1) {
        $numberofpeople = 1;
    } 

    $registrationid = pnModAPIFunc('DonateReg',
        'user',
        'createregistration',
        array('userid' => $userid,
            'donate_selectionid' => $donate_selectionid,
            'nameregistered' => $nameregistered,
            'phone' => $phone,
            'other' => $other,
            'comment' => $comment,
            'regemail' => $regemail,
            'altphone' => $altphone)); 

    // $output->Text("$registrationid / $userid / $donate_selectionid / $nameregistered / $numberofpeople / $comment / $altphone");
    // posted and the function returns
    // The API function is called.  Note that the name of the API function and
    // the name of this function are identical, this helps a lot when
    // programming more complex modules.  The arguments to the function are
    // passed in as their own arguments array
    if ($registrationid) {
        // Success
        $output->Text(_REGISTRATIONCREATED); 
        // Title - putting a title ad the head of each page reminds the user what
        // they are doing
        $output->Title(_REGISTEREVENT); 
        // Start form - note the use of pnModURL() to create the recipient URL of
        // this form.  All URLs should be generated through pnModURL() to ensure
        // compatibility with future versions of PostNuke
        $event = pnModAPIFunc('DonateReg', 'user', 'getevent', array('donate_selectionid' => $donate_selectionid));
        $output->TableStart(); 
        // userid
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_YOURUSERID));
        $row[] = $output->BoldText(pnVarPrepForDisplay(pnUserGetVar('uname')));
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT); 
        
        // donate_selectionid (OR other)
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        if ( $other != null && $other != "" )
        {
            $row[] = $output->Text(pnVarPrepForDisplay(_REGISTEREDFOR . _OTHER . ':'));
            $row[] = $output->BoldText(pnVarPrepForDisplay($other) . " ");
        }
        else
        {
            $row[] = $output->Text(pnVarPrepForDisplay(_REGISTEREDFOR . ':'));
            $row[] = $output->BoldText(pnVarPrepForDisplay($event['name']) . " ");
        }
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
            
        // Name
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_NAMEREGISTERED));
        $row[] = $output->BoldText($nameregistered);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->Linebreak(2); 
        // Main Phone #
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_PHONE));
        $row[] = $output->BoldText($phone);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->Linebreak(2); 
        // Alternate Phone #
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_ALTPHONE));
        $row[] = $output->BoldText($altphone);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->Linebreak(2); 
/* LDH - perhaps later
        // Number attending
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay(_NUMBEROFPEOPLE));
        $row[] = $output->BoldText($numberofpeople);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->Linebreak(2); 
*/
        // Comment Field
        $row = array();
        $output->SetOutputMode(_PNH_RETURNOUTPUT);
        $row[] = $output->Text(pnVarPrepForDisplay($event['commentfieldlabel']));
        $row[] = $output->BoldText($comment);
        $output->SetOutputMode(_PNH_KEEPOUTPUT);
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->TableAddrow($row, 'left');
        $output->SetInputMode(_PNH_PARSEINPUT);
        $output->Linebreak(2);

        $output->TableEnd(); 
        // End form
        $output->Linebreak(2);
    } else {
        $output->Text(_CANTCREATEREGISTRATION);
	//try to find out why - added by Brian M 1-21-05
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text(pnModFunc('DonateReg', 'user', 'whyregistrationfailed', array('donate_selectionid' => $donate_selectionid, 'numberofpeople' => $numberofpeople)));
	
    } 
    return $output->GetOutput();
} // createregistration()

/* function to try to explain why a registration failed - Brian M 1-21-05
Arguments:
	$donate_selectionid
	$numberofpeople (the number of people user tried to register - optional)
Returns
	$output (text explaination of why the registration couldn't be made)
*/
function donatereg_user_whyregistrationfailed($args) {
	extract($args);
	//echo "going to try to figure out why reg failed";
	//echo "<br>donate_selectionid =[".$donate_selectionid."] numberofpeople=[".$numberofpeople."]<br>";
	if(!$donate_selectionid){
		//don't know what event, can't do anything
		return false;
	}
	//load userapi
	if (!pnModAPILoad('DonateReg', 'user')) {
        pnSessionSetVar('errormsg', _USERAPILOADFAILED);
	return $output->GetOutput();
    } 
	$output = new pnHTML(); 
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	
        
	//decide if user can still register

	
	//first, check if registration window was closed
		//echo "checking reg window<br>";
		if (!pnModAPIFunc('DonateReg', 'user', 'checkregopen', array('event_id' => $donate_selectionid))){
			$output->Text("<br>"._EVENTREG_REGWINDOWCLOSED);
			//echo "reg window closed";
		}
	//Registration window was still open, now check that the event isn't already full 
	//echo "checking that space was available<br>";
			$reg_status = pnModAPIFunc('DonateReg', 'user', 'checkfull', array('donate_selectionid' => $donate_selectionid));
			if ($reg_status[event_full]) {
			//sorry, event is full
			$output->Text("<br>"._EVENTREG_EVENTFULL);
			//echo "full";
			
			} Else {
			//Event is open, maybe they asked for too many people
			If($numberofpeople) {
				//see if they asked for too many
				if($numberofpeople > $reg_status[seats_left]) {
					$output->Text("<br>"._YOUASKEDFOR.' '.$numberofpeople.' '._SEATS);
					$output->Text(' '._BUTONLY.' '.$reg_status[seats_left].' '._SEATSAVAILABLE);
					//echo "too many";
			} else {
				//not passed numberofpeople, so can't say for sure
				$output->Text(_UNKNOWNREGERROR);
			}
		}
	return $output->GetOutput();
	
	}
}


//Function to build confirmation e-mail - this builds the event info part of the email
function donatereg_user_emailinfo($args)
{ 
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke.
    list($donate_selectionid,
        $objectid) = pnVarCleanFromInput('donate_selectionid',
        'objectid'); 
    // User functions of this type can be called by other modules.  If this
    // happens then the calling module will be able to pass in arguments to
    // this function through the $args parameter.  Hence we extract these
    // arguments *after* we have obtained any form-based input through
    // pnVarCleanFromInput().
    extract($args); 
    // At this stage we check to see if we have been passed $objectid, the
    // generic item identifier.  This could have been passed in by a hook or
    // through some other function calling this as part of a larger module, but
    // if it exists it overrides $tid
    // Note that this module couuld just use $objectid everywhere to avoid all
    // of this munging of variables, but then the resultant code is less
    // descriptive, especially where multiple objects are being used.  The
    // decision of which of these ways to go is up to the module developer
    if (!empty($objectid)) {
        $donate_selectionid = $objectid;
    } 
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    
    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
    // The API function is called.  The arguments to the function are passed in
    // as their own arguments array
    $event = pnModAPIFunc('DonateReg',
        'user',
        'getevent',
        array('donate_selectionid' => $donate_selectionid));

    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    if ($event == false) {
        $output->Text(_ENTRYITEMFAILED . _FORENTRYITEM . $donate_selectionid);
        return $output->GetOutput();
    } 

    // //////////////////////////////extract($event);
    // Display details of the item.  Note the use of pnVarCensor() to remove
    // any words from the name that the administrator has deemed unsuitable for
    // the site.  Also note that a module variable is used here to determine
    // whether not not parts of the item information should be displayed in
    // bold type or not
    
    //Event title
    $message_body =  pnVarPrepForDisplay(_EVENTNAME) ." ".pnVarCensor($event['name'])."\n".Chr(10);
    // org Name
    $message_body .= pnVarPrepForDisplay(_ORGNAME)." ".pnVarCensor($event['orgname'])."\n".Chr(10);
    // Event Category ID
    $cat = pnModAPIFunc('DonateReg', 'user', 'getcategory', array('categoryid' => $event['category']));

    if ($cat != false) {
       // $row[] = $output->BoldText(pnVarCensor($cat['name']));
       $message_body .= pnVarPrepForDisplay(_SELECTEVENTCATEGORY)." ".pnVarCensor($cat['name'])."\n".Chr(10);
    } 
    
    
    // event Start Date/time

    $message_body .= pnVarPrepForDisplay(_EVENTSTARTDATETM)." ".pnVarCensor(date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['event_start'])." \n " . Chr(10));

    // event End Date/time

    $message_body .= pnVarPrepForDisplay(_EVENTENDDATETM)." ".pnVarCensor(date(pnModGetVar('DonateReg','dateformat') . ' ' . pnModGetVar('DonateReg','timeformat'),$event['event_end'])." " . Chr(10));

    //Event Location	

	$message_body .= pnVarPrepForDisplay(_EVENTLOCATION)." ".pnVarCensor($event['location'])."\n".Chr(10);

   if ($event['addr1'] <> null or $event['addr2'] <> null or $event['city'] <> null or $event['state'] <> null or $event['zipcode'] <> null or $event['country'] <> null) {
        // Event addr1
	$message_body .= pnVarPrepForDisplay(_EVENTADDR1)." ".chr(10).chr(9).$event['addr1']."\n".Chr(10);
        // Event addr2
	$message_body .= pnVarPrepForDisplay(_EVENTADDR2)." ".chr(10).chr(9).$event['addr2']."\n".Chr(10);
	
        // Event city, state, zip & sample map link

	$message_body .= pnVarPrepForDisplay(_EVENTCITY . ", " . _EVENTSTATE . " " . _EVENTZIPCODE). " ".chr(10).chr(9).$event['city'] . ", " . $event['state'] . " " . $event['zipcode']."\n".Chr(10);
	
	        // Event country

	$message_body .= pnVarPrepForDisplay(_EVENTCOUNTRY)." ".$event['country']."\n".Chr(10);
	
        switch (pnModGetVar('DonateReg', 'mapservice')) {
            case 'Yahoo': // us or canada only
                $mapurl = "http://us.rd.yahoo.com/maps/us/insert/Tmap/extmap/*-http://maps.yahoo.com/maps_result?";
                $mapurl .= "addr=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&csz=" . preg_replace('/ /', '+', $event['city']) . "%2C+" . $event['state'] . "+" . $event['zipcode'];
                $mapurl .= "&country=" . $event['country'];
		$message_body .= _EVENTREGYAHOOMAP." ".$mapurl."\n".Chr(10);
                //$row[] = $output->URL($mapurl, _EVENTREGYAHOOMAP);
                break;
            case 'MapQuest':
                $mapurl = "http://www.mapquest.com/maps/map.adp?";
                $mapurl .= "address=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&city=" . preg_replace('/ /', '+', $event['city']);
                $mapurl .= "&state=" . $event['state'];
                $mapurl .= "&zip=" . $event['zipcode'];
                $mapurl .= "&country=" . $event['country'];
                //$row[] = $output->URL($mapurl, _EVENTREGMAPQUEST);
		$message_body .= _EVENTREGMAPQUEST." ".$mapurl."\n".Chr(10);
                break;
            case 'MultiMap':
                $mapurl = "http://www.multimap.com/map/places.cgi?db=US&client=public";
                $mapurl .= "&pc=" . $event['zipcode'];
                $mapurl .= "&addr2=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "&addr3=" . preg_replace('/ /', '+', $event['city']);
                $mapurl .= "&state=" . $event['state'];
                $mapurl .= "&db=" . substr($event['country'],0,2); // Guessing Country code. If wrong user will follow MultiMap.
                $mapurl .= "&scale=5000";
                //$row[] = $output->URL($mapurl, _EVENTREGMULTIMAP);
		$message_body .= _EVENTREGMULTIMAP." ".$mapurl."\n".Chr(10);
                break;
            case 'Maporama':
                $mapurl = "http://www.maporama.com/share/map.asp?State=&POOCODE=&SEARCH_ADDRESS.x=0&SEARCH_ADDRESS.y=0";
                $mapurl .= "&Zip=" . $event['zipcode'];
                $mapurl .= "&_XgoGCAddress=" . preg_replace('/ /', '+', $event['addr1']);
                $mapurl .= "+" . preg_replace('/ /', '+', $event['addr2']);
                $mapurl .= "&_XgoGCTownName=" . $event['city'];
                $mapurl .= "&COUNTRYCODE=" . substr($event['country'],0,2); // Guessing Country code. If wrong user will follow MultiMap.
                //$row[] = $output->URL($mapurl, _EVENTREGMAPORAMA);
		$message_body .= _EVENTREGMAPORAMA." ".$mapurl."\n".Chr(10);
                break;
            default:
            case null:
                break;
        } // switch

	

	
    } 

    // Event Header Text

    $message_body .= pnVarPrepForDisplay(_EVENTHEADER)." ".pnVarCensor($event['header'])."\n".Chr(10);
    
    // Event Summary Text

    $message_body .= pnVarPrepForDisplay(_EVENTSUMMARY)." ".pnVarCensor($event['summary'])."\n".Chr(10);
    
    // Event Detail Text

    $message_body .= pnVarPrepForDisplay(_EVENTDESCRIPTION)." ".pnVarCensor($event['description'])."\n".Chr(10);
    
    // Registrations

    $message_body .= pnVarPrepForDisplay(_EVENTREGISTRATIONS)." ".pnVarCensor($event['registrations'])."\n".Chr(10);
    
    // Maximum Registrations
  
    $message_body .= pnVarPrepForDisplay(_EVENTMAXREGISTRATIONS)." ".pnVarCensor($event['max_donors'])."\n".Chr(10);
    
    // Fee
   
    $message_body .= pnVarPrepForDisplay(_EVENTFEE)." ".pnVarCensor(_EVENTREGCURRENCY . " " . $event['fee'])."\n".Chr(10);
    
    // Contact Phone Number
   
    $message_body .= pnVarPrepForDisplay(_EVENTCONTACTPHONE)." ".pnVarCensor($event['phone'])."\n";
    
    // LOGO GOES HERE
    // ICON GOES HERE
    // Let any hooks know that we are displaying an item.  As this is a display
    // hook we're passing a URL as the extra info, which is the URL that any
    // hooks will show after they have finished their own work.  It is normal
    // for that URL to bring the user back to this function

//Close Table
	/*
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableEnd();
    $output->SetInputMode(_PNH_PARSEINPUT); 


    $output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text(pnModFunc('DonateReg',
        					'user',
							'viewregistrations',
							array('donate_selectionid' => $event['donate_selectionid'])));
    $output->Text(pnModCallHooks('item',
            'display',
            $event['donate_selectionid'],
            pnModURL('DonateReg',
                'user',
                'displayevent',
                array('donate_selectionid' => $event['donate_selectionid']))));
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
    */
    return $message_body;
} 


//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
//*********************************************
function Donatereg_user_viewmyregistrations()
{ 
    // Get parameters from whatever input we need.  All arguments to this

    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $output = new pnHTML(); 
    // Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu(array('donate_selectionid' => null)));
    $output->SetInputMode(_PNH_PARSEINPUT); 
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!pnSecAuthAction(0, 'DonateReg::registrations', '::', ACCESS_OVERVIEW)) {
        $output->Text(_VIEWEVENTNOAUTH);
        return $output->GetOutput();
    } 
    // Load API.  All of the actual work for obtaining information on the items
    // is done within the API, so we need to load that in before we can do
    // anything.  If the API fails to load an appropriate error message is
    // posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
		$uid = pnUserGetVar('uid');
    $myregistrations = pnModAPIFunc('DonateReg',
                                    'user',
                                    'viewmyregistrations',
                                    array('uid' => $uid));

    $output->Linebreak(2); 

    if (empty($myregistrations)) {
        $output->BoldText(_EVENTREGNOREGISTRATIONSFORUSER);
        return $output->GetOutput();
    }

        $output->SetOutputMode(_PNH_KEEPOUTPUT);
	    $output->SetInputMode(_PNH_PARSEINPUT); 
		$output->Linebreak(2);
            $output->TableStart(_REGISTRATIONS, array(_NAMEREGISTERED,
                    _REGNOTIFYCOMMENT,
                    _EVENTNAME,
                    _OPTIONS), 1, '95%', 7);

        foreach ($myregistrations as $registration) {
            // regname
            $row = array();
            $output->SetOutputMode(_PNH_RETURNOUTPUT);
            $row[0] = $output->BoldText(pnVarPrepForDisplay($registration['nameregistered']));
			$row[1] = $output->BoldText(pnVarPrepForDisplay($registration['other']));
            $row[2] = $output->BoldText(pnVarPrepForDisplay($registration['eventname']));
            
	    $row[3] = $output->URL(pnModUrl("DonateReg",
                                            "user",
                                            "displayevent",
                                            array("donate_selectionid" => $registration['donate_selectionid'])),_DISPLAYEVENT);
	    $row[3] .= $output->Text(' | ');
	    $row[3] .= $output->URL(pnModUrl("DonateReg",
                                            "user",
                                            "deleteregistration",
                                            array("registrationid" => $registration['registrationid'])),_DELETEREGISTRATION);

            $output->SetInputMode(_PNH_VERBATIMINPUT);
            $row[0] .= $output->Text("&nbsp;");
            $row[1] .= $output->Text("&nbsp;");
            $row[2] .= $output->Text("&nbsp;");
            $row[3] .= $output->Text("&nbsp;");
            $output->SetOutputMode(_PNH_KEEPOUTPUT);
            $output->TableAddrow($row, 'left');
            $output->SetInputMode(_PNH_PARSEINPUT);
        } 
        $output->TableEnd();

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

function donatereg_user_deleteregistration($args)
{
    // Get parameters from whatever input we need.  All arguments to this
    // function should be obtained from pnVarCleanFromInput(), getting them
    // from other places such as the environment is not allowed, as that makes
    // assumptions that will not hold in future versions of PostNuke
    $output = new pnHTML();
    list($registrationid,
         $objectid,
         $confirmation) = pnVarCleanFromInput('registrationid',
                                              'objectid',
                                              'confirmation');
    // User functions of this type can be called by other modules.  If this
    // happens then the calling module will be able to pass in arguments to
    // this function through the $args parameter.  Hence we extract these
    // arguments *after* we have obtained any form-based input through
    // pnVarCleanFromInput().
    extract($args);
    // At this stage we check to see if we have been passed $objectid, the
    // generic item identifier.  This could have been passed in by a hook or
    // through some other function calling this as part of a larger module, but
    // if it exists it overrides $tid

    // Note that this module couuld just use $objectid everywhere to avoid all
    // of this munging of variables, but then the resultant code is less
    // descriptive, especially where multiple objects are being used.  The
    // decision of which of these ways to go is up to the module developer
    if (!empty($objectid)) {
        $registrationid = $objectid;
    }
    // Load API.  Note that this is loading the user API, that is because the
    // user API contains the function to obtain item information which is the
    // first thing that we need to do.  If the API fails to load an appropriate
    // error message is posted and the function returns
    if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADUSERAPIFAILED);
        return $output->GetOutput();
    }
    // The user API function is called.  This takes the item ID which we
    // obtained from the input and gets us the information on the appropriate
    // item.  If the item does not exist we post an appropriate message and
    // return
    $registration = pnModAPIFunc('DonateReg',
                                 'user',
                                 'getregistration',
                                  array('registrationid' => $registrationid));

    if ($registration == false) {
        $output->Text(_NOSUCHREGISTRATION);
        pnRedirect(pnModURL('DonateReg', 'user', 'viewmyregistrations'));
        return $output->GetOutput();
    }
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing.  However,
    // in this case we had to wait until we could obtain the item name to
    // complete the instance information so this is the first chance we get to
    // do the check
    
    /*the_lorax trying to work this out so it makes sense
    if (
       $registration[userid] != pnUserGetVar('uid') &&  !pnSecAuthAction(0,'DonateReg::registrations','::', ACCESS_ADMIN)    
     ) {
        $output->Text(_EVENTREGNOTYOURREGISTRATION);
        return $output->GetOutput();
    }
    */
    
     //want to make sure that either the uid of the registration is the same as that of the user OR that if the uid isn't that of the user, the user making the deletion request is an admin.
    
    //first check if uid of registration matches that of the user
    if ($registration[userid] != pnUserGetVar('uid')){
    	//the uid doesn't match so check if the user has admin rights to DonateReg
	
	//echo "this event registration isn't yours!  your uid is: ".pnUserGetVar('uid')." but the registration was made by uid: ".$registration[userid]." if you're not an admin you are a naughty person!";
	
	if (!pnSecAuthAction(0,'DonateReg::registrations','::', ACCESS_ADMIN)) {
		//the user isn't an admin but they asking for someone elses events, assume this was a hack attempt
		$output->Text(_EVENTREGNOTYOURREGISTRATION);
        return $output->GetOutput();
	}
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet - display a suitable form to obtain confirmation
        // of this action from the user
        // Create output object - this object will store all of our output so
        // that we can return it easily when required
        $output = new pnHTML();
        // Add menu to output - it helps if all of the module pages have a
        // standard menu at their head to aid in navigation
        $output->SetInputMode(_PNH_VERBATIMINPUT);
        $output->Text(donatereg_usermenu());
        $output->SetInputMode(_PNH_PARSEINPUT);
        // Title - putting a title ad the head of each page reminds the user
        // what they are doing
        $output->Title(_DELETEREGISTRATION);
        // Add confirmation to output.  Note that this uses a pnHTML helper
        // function to produce the requested confirmation in a standard
        // fashion.  This not only cuts down on code within the module but
        // allows it to be altered in future without the module developer
        // having to worry about it
        $output->ConfirmAction(_CONFIRMREGISTRATIONDELETE,
                               pnModURL('DonateReg',
                                        'user',
                                        'deleteregistration',
                                        array('registrationid' => $registrationid)),
                               _CANCELREGISTRATIONDELETE,
                               pnModURL('DonateReg',
                                        'user',
                                        'viewmyregistrations'));
        // Return the output that has been generated by this function
        return $output->GetOutput();
    }
    // If we get here it means that the user has confirmed the action
    // Confirm authorisation code.  This checks that the form had a valid
    // authorisation code attached to it.  If it did not then the function will
    // proceed no further as it is possible that this is an attempt at sending
    // in false data to the system
    if (!pnSecConfirmAuthKey()) {
        pnSessionSetVar('errormsg', _BADAUTHKEY);
        pnRedirect(pnModURL('DonateReg', 'user', 'viewmyregistrations'));
        return true;
    }

    // The return value of the function is checked here, and if the function
    // suceeded then an appropriate message is posted.  Note that if the
    // function did not succeed then the API function should have already
    // posted a failure message so no action is required
    //echo $registrationid;
    if (pnModAPIFunc('DonateReg',
                     'user',
                     'deleteregistration',
                      array('registrationid' => $registrationid))) {
        // Success
        pnSessionSetVar('statusmsg', _REGISTRATIONDELETED);
    }
    // This function generated no output, and so now it is complete we redirect
    // the user to an appropriate page for them to carry on their work
    pnRedirect(pnModURL('DonateReg', 'user', 'viewmyregistrations'));
    // Return
    return true;
}

function donatereg_user_advancedsearchform($args) {
	 if (!pnSecAuthAction(0, 'DonateReg::events', '::', ACCESS_OVERVIEW)) {
        $output->Text(_VIEWSEARCHNOAUTH);
        return $output->GetOutput();
    } 
	extract($args);
	
	if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
	if (!pnModAPILoad('DonateReg', 'admin')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
	
	$output = new pnHTML();
	// Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu());
	$output->FormStart(pnModURL('DonateReg', 'user', 'advancedsearchresults')); 
    // Add an authorisation ID - this adds a hidden field in the form that
    // contains an authorisation ID.  The authorisation ID is very important in
    // preventing certain attacks on the website
    $output->FormHidden('authid', pnSecGenAuthKey());
    
    // Start the table that holds the information to be input.  Note how each
    // item in the form is kept logically separate in the code; this helps to
    // see which part of the code is responsible for the display of each item,
    // and helps with future modifications
    $output->TableStart(); 
    
    // Search keywords for the event
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_EVENTKEYWORDS));
    $row[] = $output->FormText('eventkeywords', $eventkeywords, 75, 255);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
    // Search Keywords for Location
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_LOCATIONKEYWORDS));
    $row[] = $output->FormText('locationkeywords', $locationkeywords, 75, 255);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
    //Category Selector
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepForDisplay(_SEARCHCATEGORY));
	// Event Category ID
    $DonateRegcategory = pnModAPIFunc('DonateReg', 'admin', 'getallcategories', array());
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    if (!$DonateRegcategory) {
        $row[] = $output->Text(pnVarPrepForDisplay(_NOEVENTREGCATEGORY));
    } else {
        $row[] = $output->Text(pnVarPrepForDisplay(_SELECTEVENTCATEGORY));
        $row[] = $output->FormSelectMultiple('category', $DonateRegcategory,'','',$category);
    } 
	
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
	//Category Selector
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    
	// Search all categories?
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
$row[] = $output->Text(pnVarPrepForDisplay(_SEARCHALLCATEGORY));
        $row[] = $output->FormCheckbox('allcategories');

	
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    // pninclude_once()
    $stimes = pnModAPIFunc('DonateReg', 'user', 'buildTimeSelect', array('hselected' => $event_starttimeh, 'mselected' => $event_starttimem));
    $etimes = pnModAPIFunc('DonateReg', 'user', 'buildTimeSelect', array('hselected' => $event_endtimeh, 'mselected' => $event_endtimem)); 
    // Search Start Date
			$row = array();
			$output->SetOutputMode(_PNH_RETURNOUTPUT);
			$row[] = $output->Text(pnVarPrepForDisplay(_SEARCHSTARTDATE));
			if ($useinternationaldates) {
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildDaySelect', array('pc_day' => $day, 'selected' => $searchstartday));
				$row[2] = $output->FormSelectMultiple('searchstartday', $sel_data);
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildMonthSelect', array('pc_month' => $month, 'selected' => $searchstartmonth));
				$row[2] .= $output->FormSelectMultiple('searchstartmonth', $sel_data);
			} else {
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildMonthSelect', array('pc_month' => $month, 'selected' => $searchstartmonth));
				$row[2] = $output->FormSelectMultiple('searchstartmonth', $sel_data);
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildDaySelect', array('pc_day' => $day, 'selected' => $searchstartday));
				$row[2] .= $output->FormSelectMultiple('searchstartday', $sel_data);
			} 
			$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildYearSelect', array('pc_year' => $year, 'selected' => $searchstartyear));
			$row[2] .= $output->FormSelectMultiple('searchstartyear', $sel_data);
			$output->SetOutputMode(_PNH_KEEPOUTPUT);
		
			$output->SetInputMode(_PNH_VERBATIMINPUT);
			$output->TableAddrow($row, 'left');
			$output->SetInputMode(_PNH_PARSEINPUT); 
    //Search End Date
			$row = array();
			$output->SetOutputMode(_PNH_RETURNOUTPUT);
			$row[] = $output->Text(pnVarPrepForDisplay(_SEARCHENDDATE));
			if ($useinternationaldates) {
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildDaySelect', array('pc_day' => $day, 'selected' => $searchendday));
				$row[2] = $output->FormSelectMultiple('searchendday', $sel_data);
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildMonthSelect', array('pc_month' => $month, 'selected' => $searchendmonth));
				$row[2] .= $output->FormSelectMultiple('searchendmonth', $sel_data);
			} else {
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildMonthSelect', array('pc_month' => $month, 'selected' => $searchendmonth));
				$row[2] = $output->FormSelectMultiple('searchendmonth', $sel_data);
				$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildDaySelect', array('pc_day' => $day, 'selected' => $searchendday));
				$row[2] .= $output->FormSelectMultiple('searchendday', $sel_data);
			} 
			$sel_data = pnModAPIFunc('DonateReg', 'user', 'buildYearSelect', array('pc_year' => $year, 'selected' => $searchendyear));
			$row[2] .= $output->FormSelectMultiple('searchendyear', $sel_data);
		
			$output->SetOutputMode(_PNH_KEEPOUTPUT);
			$output->SetInputMode(_PNH_VERBATIMINPUT);
			$output->TableAddrow($row, 'left');
    $output->SetInputMode(_PNH_PARSEINPUT);
    $output->Linebreak(2); 
    

    $output->TableEnd(); 
    // End form
    $output->Linebreak(2);
	$output->Text(_SEARCHDATESCOMMENT);
	$output->Linebreak(2);
    $output->FormSubmit(_SUBMITEVENTSEARCH);
    $output->FormEnd(); 
    // Return the output that has been generated by this function
    return $output->GetOutput();
}

function donatereg_user_advancedsearchresults($args) {
	//gather the requested search parameters
	list($eventkeywords,
        $locationkeywords,
        $category,
		$searchstartmonth,
		$searchstartday,
		$searchstartyear,
		$searchendmonth,
		$searchendday,
		$searchendyear,
		$searchallcategories) = pnVarCleanFromInput('eventkeywords',
        'locationkeywords',
        'category',
		'searchstartmonth',
		'searchstartday',
		'searchstartyear',
		'searchendmonth',
		'searchendday',
		'searchendyear',
		'allcategories');
	$output = new pnHTML();
	// Add menu to output - it helps if all of the module pages have a standard
    // menu at their head to aid in navigation
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(donatereg_usermenu());
	
	if (!pnModAPILoad('DonateReg', 'user')) {
        $output->Text(_LOADFAILED);
        return $output->GetOutput();
    } 
	$items = pnModAPIFunc('DonateReg', 'user', 'advancedsearch', array('eventkeywords' => $eventkeywords, 'locationkeywords' => $locationkeywords, 'category' => $category, 'searchstartmonth' => $searchstartmonth,
		'searchstartday' => $searchstartday,
		'searchstartyear' => $searchstartyear,
		'searchendmonth' => $searchendmonth,
		'searchendday' => $searchendday,
		'searchendyear' => $searchendyear,
		'searchallcategories' => $searchallcategories));
	
	
	
	$output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableStart(_SEARCHMATCHEVENTS, array(), 1);
    $currentdt = '';
    foreach ($items as $item) {
        $output->TableRowStart();
        if ($item['event_start'] != null) {
            $output->Text('<TD border="0" width="100px" STYLE="border-top-style: none; border-right-style: dotted; border-bottom-style: dotted; border-left-style: none; border-right-width: medium; border-bottom-width: medium;">');
            $output->Text(date(	pnModGetVar('DonateReg','dateformat'),$item['event_start']));
            $output->TableColEnd();
            $output->TableRowEnd();
            $output->TableRowStart();
            //$output->TableColStart();
		$output->Text('<TD border="0" width="100px" rowspan="2">');
		//Check if the registration window has closed
		
		$output->Text(pnModFunc('DonateReg', 'user', 'regopen', array('event_id' => $item['donate_selectionid'])));
	} else {
            $output->TableColStart();
            $output->Text("&nbsp;");
        } 

        $output->TableColEnd();
        if (pnSecAuthAction(0,'DonateReg::events',"::$item[donate_selectionid] ",ACCESS_READ)) {
            $output->Text('<td colspan="1" rowspan="2" align="center" valign="center" width="50px">');

            $output->Text(date(pnModGetVar('DonateReg','timeformat'),$item['event_start']));
            $output->TableColEnd();
            $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
            $output->Text(_EVENTNAME);
            $output->TableColEnd();
            $output->TableColStart();
            $output->URL(pnModURL('DonateReg',
                    'user',
                    'displayevent',
                    array('donate_selectionid' => $item['donate_selectionid'])),
                pnVarPrepForDisplay(pnVarCensor($item['name'])));
            $output->Linebreak();
            $output->TableColEnd();
            $output->TableRowEnd();
            $output->TableRowStart();
            //$output->TableColStart(2);
            //$output->TableColEnd();
            $output->Text('<td colspan="1" rowspan="1" align="right" valign="center" width="100px">');
            $output->Text(_SUMMARY);
            $output->TableColEnd();
            $output->TableColStart();
            $output->Text($item['summary']);
            $output->TableColEnd();
            $output->TableRowEnd();
        } 
    }
	//if didn't find any events, say so
	if(!Is_Array($items)) {
		$output->TableRowStart();
		$output->TableColStart();
		$output->Text(_FOUNDNOEVENTS);
		$output->TableColEnd();
            $output->TableRowEnd();
	}
    $output->TableEnd();
	$output->Linebreak(2);
	$output->Text(pnModFunc('DonateReg', 'user', 'advancedsearchform', array('eventkeywords' => $eventkeywords, 'locationkeywords' => $locationkeywords, 'category' => $category, 'searchstartmonth' => $searchstartmonth,
		'searchstartday' => $searchstartday,
		'searchstartyear' => $searchstartyear,
		'searchendmonth' => $searchendmonth,
		'searchendday' => $searchendday,
		'searchendyear' => $searchendyear)));
	return $output->GetOutput();
}

?>
