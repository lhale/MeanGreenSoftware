<?php
// $Id: pnadmin.php
// ----------------------------------------------------------------------
// POST-NUKE Content Management System
// Copyright (C) 2002 by the PostNuke Development Team.
// http://www.postnuke.com/
// ----------------------------------------------------------------------
// Based on:
// PHP-NUKE Web Portal System - http://phpnuke.org/
// Thatware - http://thatware.org/
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WIthOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
// Filename: 1.0
// Based on : pnCPG
// Postnuked for .723 by Cas Nuy
// Purpose of file:  Admin functions for pnCPG
// ----------------------------------------------------------------------

/**
 * the main administration function
 */
function pnCPG_admin_main()
{

    // Create output object
    $output = new pnHTML();

    // Security check
    if (!pnSecAuthAction(0, 'pnCPG::', '::', ACCESS_ADMIN)) {
        $output->Text(pnVarPrepHTMLDisplay(_PNCPGNOAUTH));
        return $output->GetOutput();
    }

    // Add menu to output
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(pnCPG_adminmenu());
    $output->SetInputMode(_PNH_PARSEINPUT);

    // Return the output that has been generated by this function
    return $output->GetOutput();
}

/*
 * Main administration menu
 */
function pnCPG_adminmenu() {

   $theme = pnUserGetTheme();
	pnThemeLoad($theme);

    // Create output object
    $output = new pnHTML();

    // Security check
    if (!pnSecAuthAction(0, 'pnCPG::', '::', ACCESS_ADMIN)) {
        $output->Text(pnVarPrepHTMLDisplay(_PNCPGNOAUTH));
        return $output->GetOutput();
    }

	//Title
	ob_start();
	OpenTable();
	$oTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($oTable);
	$output->Title(pnVarPrepHTMLDisplay('<b>'._PNCPG.'</b>'));
    $output->Text(pnVarPrepHTMLDisplay(_PNCPGMODIFYCONFIG));
	ob_start();
	CloseTable();
	$cTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($cTable);

	// Start form
    $output->FormStart(pnModURL('pnCPG', 'admin', 'updateconfig'));

    // Add an authorisation ID
    $output->FormHidden('authid', pnSecGenAuthKey());


    // Start the table that holds the information to be modified.
    ob_start();
	OpenTable();
	$oTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($oTable);
	$output->TableStart();

	// pnCPG location
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODSUBJECT));
    $row[] = $output->FormText('_CPGloc', pnModGetVar('pnCPG', '_CPGloc'), 75, 75);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');
    //$output->SetInputMode(_PNH_PARSEINPUT);



	// Warning
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODWARNING));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// pnCPG database
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODDB));
    $row[] = $output->FormText('_db', pnModGetVar('pnCPG', '_db'), 50, 50);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Table Prefix
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODPRF));
    $row[] = $output->FormText('_prf', pnModGetVar('pnCPG', '_prf'),20,20);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Using AutoTheme
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_USEAT));
    $row[] = $output->FormCheckbox('_useat', pnModGetVar('pnCPG', '_useat'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	
	// Open in New >Window
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODWINDOW));
    $row[] = $output->FormCheckbox('_CPGwindow', pnModGetVar('pnCPG', '_CPGwindow'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Default language
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODLANG));
    $row[] = $output->FormText('_lang', pnModGetVar('pnCPG', '_lang'), 35, 35);
   $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Default theme
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODTHEME));
    $row[] = $output->FormText('_theme', pnModGetVar('pnCPG', '_theme'), 35, 35);
   $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Create users
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODUSERS));
    $row[] = $output->FormCheckbox('_CPGusers', pnModGetVar('pnCPG', '_CPGusers'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Use Dynamic User Data to store password
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_USEDUD));
    $row[] = $output->FormText('_usedud', pnModGetVar('pnCPG', '_usedud'), 1, 1);
	$output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Send password by email
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_SENDMAIL));
    $row[] = $output->FormCheckbox('_sendmail', pnModGetVar('pnCPG', '_sendmail'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Create album
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MAKE));
    $row[] = $output->FormText('_make', pnModGetVar('pnCPG', '_make'),1,1);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Coppermine Album
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_ALBUM));
    $row[] = $output->FormText('_album',  pnModGetVar('pnCPG', '_album'), 35, 35);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// Create Guest account
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_PNCPGGUEST));
    $row[] = $output->FormCheckbox('_CPGguest', pnModGetVar('pnCPG', '_CPGguest'));
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');



	// Use Original Guest account
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_PNCPGGUESTORG));
    $row[] = $output->FormText('_CPGguestorg', pnModGetVar('pnCPG', '_CPGguestorg'),1,1);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');


	// Update Coppermine from Postnuke
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODUPDATEPN));
    $row[] = $output->FormCheckbox('_CPGupdatePN', '');
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');


	// Postnuke Prefix
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_PNPREFIX));
    $row[] = $output->FormText('_pn_prf', pnModGetVar('pnCPG', '_pn_prf'), 35, 35);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');


	// Coppermine Prefix
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_CPGPREFIX));
    $row[] = $output->FormText('_cpg_prf', pnModGetVar('pnCPG', '_cpg_prf'), 35, 35);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');


	// PostNuke home
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_PNROOT));
    $row[] = $output->FormText('_pnroot', pnModGetVar('pnCPG', '_pnroot'),100,100);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// pnCPG database host
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODDBHOST));
    $row[] = $output->FormText('_dbhost', pnModGetVar('pnCPG', '_dbhost'), 50, 50);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// pnCPG  database user
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODDBUSER));
    $row[] = $output->FormText('_dbuser', pnModGetVar('pnCPG', '_dbuser'), 50, 50);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');

	// pnCPG database pw
    $row = array();
    $output->SetOutputMode(_PNH_RETURNOUTPUT);
    $row[] = $output->Text(pnVarPrepHTMLDisplay(_MODDBPW));
    $row[] = $output->FormText('_dbpw', pnModGetVar('pnCPG', '_dbpw'), 50, 50);
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->TableAddrow($row, 'left');


	$output->TableEnd();
	ob_start();
	CloseTable();
	$cTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($cTable);

	// End form
    //$output->Linebreak(1);
	ob_start();
	OpenTable();
	$oTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($oTable);
	$output->Text('<div align="center"><br>');
    $output->FormSubmit(pnVarPrepHTMLDisplay(_PNCPGUPDATE));
	$output->Text('<br><br></div>');
	ob_start();
	CloseTable();
	$cTable = ob_get_contents();
	ob_end_clean();
	$output->SetInputMode(_PNH_VERBATIMINPUT);
	$output->Text($cTable);
    $output->FormEnd();

	// Return the output that has been generated by this function
    $output->SetOutputMode(_PNH_KEEPOUTPUT);
	return $output->GetOutput();
}

function pnCPG_admin_updateconfig()
{
    // Get parameters from whatever input we need.
	$_CPGloc = pnVarCleanFromInput('_CPGloc');
	$_CPGwindow = pnVarCleanFromInput('_CPGwindow');
	$_prf = pnVarCleanFromInput('_prf');
	$_CPGusers = pnVarCleanFromInput('_CPGusers');
	$_CPGguest = pnVarCleanFromInput('_CPGguest');
	$_CPGguestorg = pnVarCleanFromInput('_CPGguestorg');
	$_CPGupdatePN = pnVarCleanFromInput('_CPGupdatePN');
	$_cpg_prf = pnVarCleanFromInput('_cpg_prf');
	$_pn_prf = pnVarCleanFromInput('_pn_prf');
	$_db = pnVarCleanFromInput('_db');
	$_lang = pnVarCleanFromInput('_lang');
	$_make = pnVarCleanFromInput('_make');
	$_album = pnVarCleanFromInput('_album');
	$_theme = pnVarCleanFromInput('_theme');
	$_sendmail = pnVarCleanFromInput('_sendmail');
	$_usedud = pnVarCleanFromInput('_usedud');
	$_pnroot = pnVarCleanFromInput('_pnroot');
	$_dbhost = pnVarCleanFromInput('_dbhost');
	$_dbuser = pnVarCleanFromInput('_dbuser');
	$_dbpw = pnVarCleanFromInput('_dbpw');
	$_useat = pnVarCleanFromInput('_useat');


    // Confirm authorisation code.
    if (!pnSecConfirmAuthKey()) {
        pnSessionSetVar('errormsg', _BADAUTHKEY);
        pnRedirect(pnModURL('pnCPG', 'admin', ''));
        return true;
    }

    // Update module variables.
    pnModSetVar('pnCPG', '_CPGloc', $_CPGloc);
    pnModSetVar('pnCPG', '_CPGwindow', $_CPGwindow);
    pnModSetVar('pnCPG', '_prf', $_prf);
    pnModSetVar('pnCPG', '_CPGusers', $_CPGusers);
    pnModSetVar('pnCPG', '_CPGguest', $_CPGguest);
    pnModSetVar('pnCPG', '_CPGguestorg', $_CPGguestorg);
    pnModSetVar('pnCPG', '_cpg_prf', $_cpg_prf);
    pnModSetVar('pnCPG', '_pn_prf', $_pn_prf);
    pnModSetVar(pnCPG, '_db', $_db);
    pnModSetVar(pnCPG, '_lang', $_lang);
    pnModSetVar(pnCPG, '_make', $_make);
    pnModSetVar(pnCPG, '_album', $_album);
    pnModSetVar(pnCPG, '_theme', $_theme);
    pnModSetVar(pnCPG, '_sendmail', $_sendmail);
    pnModSetVar(pnCPG, '_usedud', $_usedud);
	pnModSetVar(pnCPG, '_dbhost', $_dbhost);
	pnModSetVar(pnCPG, '_dbuser', $_dbuser);
	pnModSetVar(pnCPG, '_dbpw', $_dbpw);
	pnModSetVar(pnCPG, '_pnroot', $_pnroot);
    pnModSetVar(pnCPG, '_useat', $_useat);


if ($_CPGupdatePN != '') {
$updatePN = SyncPN() ;
}



    // This function generated no output, and so now it is complete we redirect
    // the user to an appropriate page for them to carry on their work
    pnRedirect('admin.php');

    // Return
    return true;
}

function SyncPN()
{
$cpg_loc = pnModGetVar('pnCPG', '_CPGloc');
$_cpg_prf = pnVarCleanFromInput('_cpg_prf');
$_pn_prf = pnVarCleanFromInput('_pn_prf');
$db=pnModGetVar('pnCPG', '_db');
$_dbhost=pnModGetVar('pnCPG', '_dbhost');
$_dbuser=pnModGetVar('pnCPG', '_dbuser');
$_dbpw=pnModGetVar('pnCPG', '_dbpw');
$std_db = $ntPrefix = pnConfigGetVar('dbname');
$_pnroot=pnModGetVar('pnCPG', '_pnroot');
$makealbum=pnModGetVar('pnCPG', '_make');


// Load Postnuke users
$results = mysql_query( "SELECT pn_uname,pn_email FROM $_pn_prf LIMIT 0 , 999999" );

//store the result in a PHP array for multiple use
$dbdata=array();
$dbdata1=array();
$usr_num = 0;
while($row = mysql_fetch_array($results)) {
$usr_num ++;
$dbdata[$usr_num]=$row[0];
$dbdata1[$usr_num]=$row[1];
}

// is there another database owner, let's connect
if ($_dbhost !==""){
	$link = mysql_connect($_dbhost, $_dbuser, $_dbpw) or mysql_error();
}
$true = mysql_select_db($db) ;

$teller = 0;
while ($teller < $usr_num ){

$teller ++ ;
$username = $dbdata[$teller];
$usermail = $dbdata1[$teller];

// Check if already added to Coppermine
$results1 = mysql_query( "SELECT * FROM $_cpg_prf WHERE user_name=$username " );
$num_rows1 = mysql_num_rows($results1);


// if not there, add the account
if ($num_rows1 < 1){
$cpg_pwd = ranpass() ;
$adding = mysql_query("INSERT INTO $_cpg_prf(user_group, user_active,user_name, user_password,user_lastvisit, user_regdate,user_email) VALUES ('2','YES', '$username','$cpg_pwd',NOW(), NOW(),'$usermail')");


if ($makealbum == 'y'){
$results = mysql_query( "SELECT * FROM $_cpg_prf where user_name='$username' " );
$USER_DATA = mysql_fetch_array($results);
$temp_user_cat = $USER_DATA['user_id'];
$temp_user_cat = $temp_user_cat + 10000;
mysql_query("INSERT INTO $_cpg_album(title, description, visibility, uploads, comments, votes, pos, category, pic_count, thumb, last_addition, stat_uptodate, keyword) VALUES ('$f_username', '', '0', 'NO', 'YES', 'YES', '1', '$temp_user_cat', '0', '0', '0', 'NO', '$f_username')");

}





} else {
//update e-mail
$updating = mysql_query("UPDATE $_cpg_prf set  user_email = '$usermail' where user_name='$username' limit 1");

}
}

if ($_dbhost !==""){
	include_once($_pnroot."config.php");
// Decode encoded DB parameters
if ($pnconfig['encoded']) {
	$pnconfig['dbuname'] = base64_decode($pnconfig['dbuname']);
	$pnconfig['dbpass'] = base64_decode($pnconfig['dbpass']);
}

	$link = mysql_connect($pnconfig['dbhost'], $pnconfig['dbuname'], $pnconfig['dbpass']) or mysql_error();
}
$true = mysql_select_db($std_db) ;


    // Return
    return true;
}

function ranpass($len = "8"){
 $pass = NULL;
 for($i=0; $i<$len; $i++) {
   $char = chr(rand(48,122));
   while (!ereg("[a-zA-Z0-9]", $char)){
     if($char == $lchar) continue;
     $char = chr(rand(48,90));
   }
   $pass .= $char;
   $lchar = $char;
 }
 return $pass;
}

?>
